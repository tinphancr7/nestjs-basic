import { Inject, Injectable } from "@nestjs/common";
// INNER
import { CreateCommentDto } from "./dto/create-comment.dto";

import { Comment, CommentDocument } from "./entities/comment.entity";
// OUTER

import { SoftDeleteModel } from "soft-delete-plugin-mongoose";
import { InjectModel } from "@nestjs/mongoose";
import { IUser } from "../users/users.interface";
import { toObjectId } from "src/utils";

@Injectable()
export class CommentsService {
  constructor(@InjectModel(Comment.name) private commentModel: SoftDeleteModel<CommentDocument>) {
    // super(jobModel);
  }
  async create(createCommentDto: CreateCommentDto, user: IUser) {
    // üìù Ch·ªâ cho ph√©p comment c√≥ ƒë·ªô s√¢u 1 level v√¨ th·∫ø ch√∫ng ta s·∫Ω l√†m theo nh∆∞ facebook,
    // c√°c reply cho comment ƒë√£ c√≥ parent s·∫Ω ƒë∆∞·ª£c chuy·ªÉn th√†nh con c·ªßa parent ƒë√≥.
    if (createCommentDto?.parent_id) {
      const parent = await this.commentModel.findById(createCommentDto.parent_id);
      return await this.commentModel.create({
        ...createCommentDto,
        parent_id: parent.parent_id ? parent.parent_id : parent._id,
        createdBy: toObjectId(user?._id),
      });
    }

    return await this.commentModel.create({
      ...createCommentDto,
      createdBy: toObjectId(user?._id),
    });
  }
  // async findAll(filter: { target_id: string }, { offset, limit, sort_type }) {
  //   return await this.commentModel.findAll(
  //     {
  //       ...filter,
  //       parent_id: null,
  //     },
  //     {
  //       offset,
  //       limit,
  //       sort_type,
  //       populate: ["children_ids"],
  //     },
  //   );
  // }
  // async addReplyComment(parent_id: string, reply_id: string) {
  //   return await this.comment_model.findByIdAndUpdate(parent_id, {
  //     $push: {
  //       children_ids: reply_id,
  //     },
  //   });
  // }
  // async removeReplyComment(parent_id: string, reply_id: string) {
  //   return await this.comment_model.findByIdAndUpdate(parent_id, {
  //     $pull: {
  //       children_ids: reply_id,
  //     },
  //   });
  // }

  // async softDeleteMany(ids: Array<string>): Promise<boolean> {
  //   const response = await this.comment_model.updateMany(
  //     {
  //       _id: {
  //         $in: ids,
  //       },
  //     },
  //     {
  //       deleted_at: new Date(),
  //     },
  //   );

  //   return response.modifiedCount !== 0;
  // }
  // async remove(id: string): Promise<boolean> {
  //   const comment = await this.commentModel.findOneById(id);
  //   if (!comment) {
  //     return false;
  //   }
  //   // TH1: Comment c√≥ reply comment b√™n trong 1Ô∏è‚É£
  //   if (comment.children_ids.length) {
  //     return await this.commentModel.softDeleteMany([...(comment.children_ids as unknown as Array<string>), id]);
  //   }
  //   // TH2: Comment ƒëang reply comment kh√°c 2Ô∏è‚É£
  //   if (comment.parent_id) {
  //     await this.commentModel.removeReplyComment(comment.parent_id.toString(), id);
  //   }
  //   // TH3: Comment kh√¥ng c√≥ comment reply c≈©ng kh√¥ng reply comment 3Ô∏è‚É£
  //   return await this.commentModel.softDelete(comment._id.toString());
  // }

  // async getCommentsWithHierarchy(
  //   filter: { target_id: string; parent_id: null | string },
  //   { offset, limit, sort_type }: { offset: number; limit: number; sort_type: SORT_TYPE },
  //   limit_child = 1,
  // ): Promise<FindAllResponse<Comment>> {
  //   console.log(sort_type);
  //   const response = await this.comment_model.aggregate<{
  //     items: object;
  //     count: { total: number };
  //   }>([
  //     {
  //       // L·ªçc ra c√°c comment thu·ªôc target v√† search theo input n·∫øu c√≥
  //       $match: {
  //         ...filter,
  //         target_id: new mongoose.Types.ObjectId(filter.target_id),
  //       },
  //     },
  //     {
  //       // S·∫Øp x·∫øp l·∫°i comment
  //       $sort: {
  //         created_at: sort_type === SORT_TYPE.DESC ? -1 : 1,
  //       },
  //     },
  //     {
  //       // Chia ra l√†m 2 ph·∫ßn: 1 ph·∫ßn ƒë·ªÉ count t·ªïng s·ªë comment, 1 ph·∫ßn ƒë·ªÉ get comments
  //       $facet: {
  //         count: [
  //           // ƒê·∫øm t·ªïng s·ªë comment v√† l∆∞u v√†o bi·∫øn `total`
  //           {
  //             $count: "total",
  //           },
  //         ],
  //         items: [
  //           {
  //             // Pagination skip
  //             $skip: offset,
  //           },
  //           {
  //             $limit: limit,
  //           },
  //           // Find reply comment
  //           {
  //             // GraphLookup gi√∫p ch√∫ng ta l·∫•y ra t·∫•t c·∫£ c√°c con c·ªßa document
  //             $graphLookup: {
  //               from: "comments", // T√¨m trong `comments` collection
  //               startWith: "$_id",
  //               connectFromField: "_id", // Khai b√°o field ƒë·ªÉ khi parent t√¨m t·ªõi s·∫Ω l·∫•y ra so s√°nh
  //               connectToField: "parent_id", // Khai b√°o field d√πng so s√°nh ƒë·ªÉ t√¨m c√°c children
  //               maxDepth: 0, // ƒê·ªô s√¢u m√† ch√∫ng ta c·∫ßn l·∫•y d·ªØ li·ªáu, v√≠ d·ª• ·ªü ƒë√¢y ƒëang l·∫•y reply comment ƒë·ªô s√¢u level 1
  //               as: "replies", // Khai b√°o t√™n field ƒë·ªÉ th√™m v√†o c√°c children
  //             },
  //           },
  //           {
  //             // Lo·∫°i b·ªè 1 v√†i field kh√¥ng c·∫ßn thi·∫øt
  //             $project: {
  //               content: 1,
  //               created_by: 1,
  //               total_liked: 1,
  //               created_at: 1,
  //               // ·ªû ƒë√¢y logic c·ªßa ch√∫ng ta l√† l·∫•y ra 5 children g·∫ßn nh·∫•t,
  //               // khi mu·ªën l·∫•y th√™m th√¨ s·∫Ω g·ªçi API t∆∞∆°ng t·ª± nh∆∞ c√°ch facebook l√†m.
  //               // `$sort` v√† `$slice` l√† s·ª± k·∫øt h·ª£p hi·ªáu qu·∫£ cho y√™u c·∫ßu n√†y
  //               replies: {
  //                 // Sau khi c√≥ ƒë∆∞·ª£c k·∫øt qu·∫£ sort t·ª´ `$sortArray` ch√∫ng ta d√πng `$slice` c·∫Øt b·ªè c√°c document c√≤n l·∫°i
  //                 $slice: [
  //                   {
  //                     // V√¨ c√°c children t√¨m ƒë∆∞·ª£c kh√¥ng theo th·ª© t·ª± n√™n ch√∫ng ta c·∫ßn sort tr∆∞·ªõc
  //                     $sortArray: {
  //                       input: "$replies",
  //                       sortBy: { created_at: -1 },
  //                     },
  //                   },
  //                   // Control s·ªë l∆∞·ª£ng children hi·ªÉn th·ªã, m·∫∑c ƒë·ªãnh ·ªü tr√™n m√¨nh set l√† 1
  //                   limit_child,
  //                 ],
  //               },
  //               // V√¨ ƒë√£ c·∫Øt b·ªõt children n√™n khi tr·∫£ v·ªÅ FE kh√¥ng bi·∫øt comment ƒë√≥ c√≤n c√≥ c√°c reply kh√°c hay kh√¥ng
  //               // v√¨ th·∫ø ch√∫ng ta s·∫Ω t·∫°o th√™m field v√† d√πng `$size` ƒë·ªÉ ƒë·∫øm t·ªïng s·ªë reply.
  //               total_replies: {
  //                 $size: "$replies",
  //               },
  //             },
  //           },
  //           {
  //             // V√¨ hi·ªán t·∫°i `created_by` ch·ªâ l√† id n√™n ch√∫ng ta c·∫ßn `$lookup` ƒë·ªÉ l·∫•y th√™m th√¥ng tin
  //             $lookup: {
  //               from: "users",
  //               localField: "created_by",
  //               foreignField: "_id",
  //               pipeline: [
  //                 {
  //                   $project: {
  //                     first_name: 1,
  //                     last_name: 1,
  //                     email: 1,
  //                     avatar: 1,
  //                   },
  //                 },
  //               ],
  //               as: "created_by",
  //             },
  //           },
  //           {
  //             // Ch√∫ng ta c≈©ng c·∫ßn th√™m th√¥ng tin cho `created_by` trong reply v√¨ th·∫ø
  //             // c·∫ßn ph·∫£i d√πng `$unwind` ƒë·ªÉ t√°ch m·∫£ng `replies` ra
  //             $unwind: {
  //               path: "$replies",
  //               preserveNullAndEmptyArrays: true,
  //             },
  //           },
  //           {
  //             // Lo·∫°i b·ªè c√°c reply comment ƒë√£ b·ªã x√≥a
  //             $match: {
  //               "replies.deleted_at": null,
  //             },
  //           },
  //           {
  //             // T∆∞∆°ng t·ª± nh∆∞ tr√™n s·∫Ω lookup theo `created_by` b√™n trong `replies`
  //             $lookup: {
  //               from: "users",
  //               localField: "replies.created_by",
  //               foreignField: "_id",
  //               pipeline: [
  //                 {
  //                   $project: {
  //                     first_name: 1,
  //                     last_name: 1,
  //                     email: 1,
  //                     avatar: 1,
  //                   },
  //                 },
  //               ],
  //               as: "replies.created_by",
  //             },
  //           },
  //           {
  //             // Sau khi ƒë√£ th√™m th√¥ng tin ch√∫ng ta c·∫ßn g·ªôp l·∫°i nh∆∞ ban ƒë·∫ßu
  //             // theo c·∫•u tr√∫c comment ch·ª©a m·∫£ng replies
  //             $group: {
  //               _id: "$_id",
  //               content: {
  //                 $first: "$content",
  //               },
  //               created_by: {
  //                 $first: {
  //                   // K·∫øt qu·∫£ c·ªßa qu√° tr√¨nh lookup tr∆∞·ªõc l√† array n√™n ch√∫ng ta ph·∫£i ƒë∆∞a v·ªÅ d·∫°ng object
  //                   $arrayElemAt: ["$created_by", 0],
  //                 },
  //               },
  //               created_at: {
  //                 $first: "$created_at",
  //               },
  //               total_replies: {
  //                 $first: "$total_replies",
  //               },
  //               total_liked: {
  //                 $first: "$total_liked",
  //               },
  //               replies: {
  //                 // D√πng `$push` ƒë·ªÉ push c√°c children l·∫°i v√†o trong m·∫£ng replies
  //                 $push: {
  //                   // K·∫øt qu·∫£ c·ªßa `$lookup` l√† array n√™n ch√∫ng ta c·∫ßn ƒë∆∞a v·ªÅ object,
  //                   // Th√¥ng th∆∞·ªùng s·∫Ω d√πng `$unwind` nh∆∞ng ·ªü ƒë√¢y m√¨nh d√πng `$mergeObject` v√†
  //                   // `$arrayElemAt` ƒë·ªÉ ƒë·ª° ph·∫£i t√°ch ra 2 stage
  //                   $mergeObjects: [
  //                     "$replies",
  //                     {
  //                       created_by: {
  //                         $arrayElemAt: ["$replies.created_by", 0],
  //                       },
  //                     },
  //                   ],
  //                 },
  //               },
  //             },
  //           },
  //           {
  //             // Qu√° tr√¨nh unwind ·ªü tr√™n l√†m cho th·ª© t·ª± b·ªã x√°o tr·ªôn n√™n ch√∫ng ta c·∫ßn sort l·∫°i
  //             $sort: {
  //               created_at: sort_type === SORT_TYPE.DESC ? -1 : 1,
  //             },
  //           },
  //         ],
  //       },
  //     },
  //     {
  //       // K·∫øt qu·∫£ c·ªßa `$count` ·ªü tr√™n l√† array n√™n m√¨nh s·∫Ω ƒë∆∞a v·ªÅ object cho d·ªÖ nh√¨n
  //       $unwind: {
  //         path: "$count",
  //       },
  //     },
  //   ]);

  //   return {
  //     items: (response[0]?.items as Array<Comment>) || [],
  //     count: response[0]?.count.total || 0,
  //   };
  // }
}
